#! /bin/bash
#
# Script to start a JMRI @VERSION@ application
#
# This script is used for both all POSIX operating systems including Linux
# and macOS / OS X application bundles
#
# If you need to add any additional Java options or persistent command line
# arguments, include them in the "default_options" statement in the file
# jmri.conf in the settings directory.
#
# The default location for the settings directory is:
# - macOS / OS X: ${HOME}/Library/Preferences/JMRI
# - all other: ${HOME}/.jmri
#
# The settings directory can be set to a non-standard location using the
# "--settingsdir /path/to/my/settings" command line option (unlike all other
# options, this one cannot be set in the jmri.conf file, since it determines
# where the jmri.conf file will be read from).
#
# If your serial ports are not in the default list, include them in the
# command line argument --serial-ports separated by commas:
#    --serial-ports=/dev/locobuffer,/dev/cmri
#
# You can run separate instances of the program with their own preferences
# if you
# - Provide the name of a configuration file as a parameter
# or
# - Copy and rename this script.
#
# If you rename the script to, for example, JmriNew, it will use
# "JmriNewConfig.properties" as it's configuration file. Note that configuration
# files only determine which profile to use, and if the profile selector should
# be shown at application launch.
#
# If you are getting X11 warnings about meta keys, uncomment the next line
# xprop -root -remove _MOTIF_DEFAULT_BINDINGS
#
# For more information, please see
# http://jmri.org/help/en/html/doc/Technical/StartUpScripts.shtml

# prevent the use of unbound variables
set -u

# display valid arguments
function usage() {
    cat <<EOM
Usage: $( basename $0 ) [--help] [OPTIONS]
  -c CONFIG, --config=CONFIG     Start JMRI with configuration CONFIG
  --cp:a=CLASSPATH               Append specified JARs to the classpath
  --cp:p=CLASSPATH               Prepend specified JARs to the classpath
  -d, --debug                    Add verbose output to this script
  -JOPTION                       Pass the option OPTION to the JVM
  -p PROFILE, --profile=PROFILE  Start JMRI with the profile PROFILE
  --serial-ports=SERIAL_PORTS    Use the serial ports in SERIAL_PORTS
  --settingsdir=SETTINGS_DIR     Use SETTINGS_DIR as the settings directory
EOM
}

# parse passed in arguments from either default_options or command line
# except --settingsdir argument
function parse_args() {
    while [ $# -gt 0 ] ; do
        case "${1}" in
            # append to classpath
            --cp:a) post_classpath="${2}" ; shift ;;
            --cp:a=*) post_classpath="${1#*=}" ;;
            # prepend to classpath
            --cp:p) pre_classpath="${2}" ; shift ;;
            --cp:p=*) pre_classpath="${1#*=}" ;;
            # use named configuration
            --config) CONFIGNAME="$2" ; shift ;;
            --config=*) CONFIGNAME="${1#*=}" ;;
            -c) CONFIGNAME="$2" ; shift ;;
            # debugging
            -d|--debug) DEBUG="yes" ;;
            # help
            --help) usage ; exit 2 ;;
            # heap sizes
            -JXms*) jmri_xms="${1#-J}" ;;
            -JXmx*) jmri_xmx="${1#-J}" ;;
            # JVM arguments other than max memory
            -J*) JMRI_OPTIONS="${JMRI_OPTIONS} ${1#-J}" ;;
            # JMRI configuration profile
            --profile) JMRI_OPTIONS="${JMRI_OPTIONS} -Dorg.jmri.profile=$2" ; shift ;;
            --profile=*) JMRI_OPTIONS="${JMRI_OPTIONS} -Dorg.jmri.profile=${1#*=}" ;;
            -p) JMRI_OPTIONS="${JMRI_OPTIONS} -Dorg.jmri.profile=$2" ; shift ;;
            # serial ports
            --serial-ports) JMRI_SERIAL_PORTS="${2}" ;;
            --serial-ports=*) JMRI_SERIAL_PORTS="${1#*=}" ; shift ;;
        esac
        shift
    done
}

# get the default heap size for JMRI
function heap_size() {
    mem=640
    case "`uname`" in
        Linux*)
            mem=`cat /proc/meminfo | grep MemTotal | tr -d [:space:][:alpha:]:`
            mem=`expr $mem / 1024`
            ;;
        SunOS*)
            mem=`/usr/sbin/prtconf | grep Memory | /usr/bin/tr -dc '[0-9]'`
            ;;
        Darwin*)
            mem=`/usr/sbin/sysctl hw.memsize | tr -d [:alpha:][:space:].:`
            mem=`expr $mem / 1048576`
            ;;
        *)
            ;;
    esac
    if [ -z "$mem" ] ; then
        mem=640
    fi
    mem=`expr $mem / 2`
    if [ $mem -gt 768 ] ; then
        mem=768
    elif [ $mem -lt 192 ] ; then
        mem=192
    fi
    echo $mem
    return 0
}

# get the script's location as an absolute path
SCRIPTDIR=$(cd "$( dirname "${0}" )" && pwd)

# define the class to be invoked
DEFAULT_APP_NAME="@NAME@"
CLASSNAME="@CLASS@"

# ensure JMRI options are always set
JMRI_OPTIONS=${JMRI_OPTIONS:-}

# set default config name
CONFIGNAME=""

# default memory values
jmri_xmx="-Xmx$( heap_size )m"
jmri_xms="-Xms96m"

# JMRI installation location
JMRI_HOME=${JMRI_HOME:-}

# set DEBUG to any non-empty string to see debugging output
DEBUG=${DEBUG:-}

# set the OS (can be overridden in enviroment for debugging and development)
# this value is used to find OS-specific libraries, so it gets normalized
# in following case statement
OS=${OS:$( uname -s )}
ARCH=${ARCH:-}

# set OS-specific settings
case "${OS}" in
    macosx|Darwin*)
        settingsdir="~/Library/Preferences/JMRI"
        OS="macosx"
        ;;
    Linux*)
        settingsdir="~/.jmri"
        OS="linux"
        ;;
    *)
        settingsdir="~/.jmri"
        ;;
esac

# get the settings directory if set on command line
found_settingsdir=""
for opt in "$@"; do
    if [ "${found_settingsdir}" = "yes" ]; then
        # --settingsdir /path/to/... part 2
        settingsdir="$opt"
        break
    elif [ "$opt" = "--settingsdir" ]; then
        # --settingsdir /path/to/... part 1
        found_settingsdir="yes"
    elif [[ "$opt" =~ "--settingsdir=" ]]; then
        # --settingsdir=/path/to/...
        settingsdir="${opt#*=}"
        break;
    fi
done

# set default_options from the launcher configuration file
if [ -f "${settingsdir}/jmri.conf" ] ; then
    source "${settingsdir}/jmri.conf"
fi
# ensure default_options is defined, even if not in the configuration file
default_options=${default_options:-}

# process arguments, stored arguments first, so CLI arguments can override
parse_args $default_options
parse_args $@

## ask the user if they want to install Java, and open the Java web site if yes
OfferJavaDownload() {
    x=`/usr/bin/osascript << EOT
    tell application "Finder"
    activate
    set myReply to button returned of (display dialog "No Java can be found on the system.\nWould you like to download Java now?" \
         buttons { "No", "Yes" } \
         with icon stop  \
         with title "JMRI Installation Problem")
    end tell
EOT
  `
    if [ "$x" = "Yes" ] ; then
        open http://java.com/
    fi
    exit 1
}


if [ -z "$OS" ] ; then
    # start finding the architecture specific library directories
    OS=`uname -s`

    # normalize to match our standard names
    if [ "$OS" = "Linux" ] ; then
      OS="linux"
    fi

    if [ "$OS" = "Darwin" ] ; then
      OS="macosx"
    fi
fi

#
# macOS / OS X has a bewildering array of possibilities these days
#
# The Apple Java 6 runtime might be present, and if it is, then using
# /usr/libexec/java_home will find the correct version, based on the user's
# set preferences.   Note that this also works to find a Java 7 JDK, but
# not the Java 7 JRE.
#
# As 10.8 & 10.9 do not ship with a Java runtime, this command will prompt
# the user and download a JRE as needed.
#
# But if the user already has the Oracle Java 7 JRE installed, we should
# use that instead of forcing a download of Apple's Java 6.
#
# * So look for the Oracle Java 7 JRE and use it if found
# * Otherwise, use java_home if it's present
# * As a last resort, use the default 'java' command and let the user
#   deal with it.

if [ "$OS" = "macosx" ] ; then
    # on OS X, we default to logging, since the Console app make it less visible unless you look for it
    DEBUG=yes

    # this is the current (1.7.0_45ish) location of the Oracle installed Java 7 JRE (but not the JDK)
    PLUGINDIR="/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home"
    if [ -x "$PLUGINDIR/bin/java" ] ; then
        JAVA_HOME="$PLUGINDIR"
        JAVACMD=("$PLUGINDIR/bin/java")

        export JAVA_HOME

    # check for Apple method of directly locating java binaries (may find a Java 6 JRE or a Java 7 JDK)
    elif [ -x /usr/libexec/java_home ] ; then
        VERSION=$(/usr/libexec/java_home -exec java -version)
        if [ $? == 0 ] ; then
            JAVACMD=("/usr/libexec/java_home" "-exec" "java")
        else
            OfferJavaDownload
        fi
    else
        # this isn't supposed to happen on any Mac that I know of in 2013... but you never know
        OfferJavaDownload
    fi
fi


# define JMRI_HOME if it is not defined
if [ -z "${JMRI_HOME}" ] ; then
    if [ "$OS" = "macosx" ] ; then
        # on OS X, the .app bundle is assumed to reside in the default JMRI_HOME
        BUNDLEDIR=$(cd "${SCRIPTDIR}/../.." && pwd)
        JMRI_HOME=$(cd "${BUNDLEDIR}/.." && pwd)
    else
        JMRI_HOME="$SCRIPTDIR"
    fi
fi

cd "${JMRI_HOME}"
[ -n "${DEBUG}" ] && echo "PWD: '${PWD}'"


# build library path
SYSLIBPATH=


LIBDIR="lib"

if [ -d "${LIBDIR}/$OS" ] ; then
    SYSLIBPATH="${LIBDIR}/$OS"
fi

# one or another of these commands should return a useful value, except that sometimes
# it is spelled funny (e,g, amd64, not x86_64).

if [ -z "$ARCH" ] ; then
    for cmd in "arch" "uname -i" "uname -p" "uname -m" ; do
        ARCH=`$cmd 2>/dev/null`
        if [ -n "$ARCH" ] ; then
            # canonicalize the architecture names where possible
            # we currently have AMD64 / X86_64
            if [ "$ARCH" = "amd64" ] ; then
                ARCH="x86_64"
            fi

            # and all the flavors of ia32 (traditional x86)
            if [ "$ARCH" = "i686" -o "$ARCH" = "i586" -o "$ARCH" = "i486" ] ; then
                ARCH="i386"
            fi

            # Now deal with ARM architecture:
            #   armv5 contains v5 soft-float version
            #   armv6l contains v6 hard-float version
            #   armv7l contains v7 hard-float version
            #   aarch64 contains 64-bit v8 version

            if [ "${ARCH:0:3}" = "arm" ] ; then

                #determine arm version & hard vs. soft float using readelf
                ARCHVERSION=`readelf -A /proc/self/exe | grep Tag_CPU_arch | cut -d : -f2`
                if [ -z "$ARCHVERSION" -o "${ARCHVERSION:1:2}" = "v5" ] ; then
                    ARCH="armv5"
                elif [ "${ARCHVERSION:1:2}" = "v6" ] ; then
                    ARCH="armv6l"
                elif [ "${ARCHVERSION:1:2}" = "v7" ] ; then
                    ARCH="armv7l"
                else
                    ARCH="armv5"
                fi
            fi

            if [ "$ARCH" = "aarch64" -o "$ARCH" = "arm64" ] ; then
                ARCH="aarch64"
            fi

            if [ -d "${SYSLIBPATH}/$ARCH" ] ; then
                SYSLIBPATH="${SYSLIBPATH}/$ARCH:$SYSLIBPATH"

                # we're only interested in ONE of these values, so as soon as we find a supported
                # architecture directory, continue processing and start up the program
                break
            fi
        fi
    done
fi


# build classpath dynamically
CP="${pre_classpath}:.:classes:java/classes"
# list of jar files in home, not counting jmri.jar
LOCALJARFILES=`ls ${LIBDIR}/*.jar | grep -v jmri.jar | tr "\n" ":"`
if [ ${LOCALJARFILES} ] ; then
    CP="${CP}:${LOCALJARFILES}"
fi
# add jmri.jar
CP="${CP}:jmri.jar"
# and contents of lib
CP="${CP}:`ls -m ${LIBDIR}/*.jar | tr -d ' \n' | tr ',' ':'`"

if [ -d /System/Library/Java ] ; then
    CP="${CP}":/System/Library/Java
fi
CP="${CP}:${post_classpath}"

[ -z "${JAVACMD[@]}" ] && JAVACMD=("java")

[ -n "${DEBUG}" ] && echo "CLASSPATH: '${CP}'"

[ -n "${DEBUG}" ] && echo "Java CMD: '${JAVACMD[@]}'"

# configuration file name is 1st argument.
# If not provided, build config file name dynamically
if [ "$OS" = "macosx" ] ; then
    # OS X can have spaces in the application name
    APPNAME=`basename -s .app "${BUNDLEDIR}"`
else
    APPNAME=`basename "$0"`
fi

[ -n "${DEBUG}" ] && echo "APPNAME: '${APPNAME}'"

# we only process a config file name when the application is
# NOT the default one this script was built for.
if [ "$APPNAME" != "$DEFAULT_APP_NAME" ] ; then
    if [ -z "${CONFIGNAME}" ] ; then
        CONFIGNAME=`echo $APPNAME | tr -d '[:space:]' | tr -d '=' `
    fi
    CONFIGFILE="config=${CONFIGNAME}Config.xml"
    [ -n "${DEBUG}" ] && echo "CONFIGFILE: '${CONFIGFILE}'"
fi

# create the option string
#
# Add JVM and RMI options to user options, if any

if [ "$OS" = "macosx" ] ; then
    # since bash mangles the application name and icon in $OPTIONS,
    # these are not stored in $OPTIONS
    OS_OPTIONS="-Dapple.laf.useScreenMenuBar=true"
    OS_OPTIONS="${OS_OPTIONS} -Dcom.apple.macos.useScreenMenuBar=true"
    OS_OPTIONS="${OS_OPTIONS} -Dfile.encoding=UTF-8"
    if [ -f "${BUNDLEDIR}/Contents/Resources/@ICON@.icns" ] ; then
        APPICON="${BUNDLEDIR}/Contents/Resources/@ICON@.icns"
    else
        APPICON=`find "${BUNDLEDIR}" | grep -s -m 1 icns`
    fi
fi

OPTIONS="${JMRI_OPTIONS} -noverify"
OPTIONS="${OPTIONS} -Djava.security.policy=${LIBDIR}/security.policy"
OPTIONS="${OPTIONS} -Djava.rmi.server.codebase=file:java/classes/"
OPTIONS="${OPTIONS} -Djava.library.path=.:$SYSLIBPATH:${LIBDIR}"

# memory start and max limits
OPTIONS="${OPTIONS} ${OS_OPTIONS} ${jmri_xms} ${jmri_xmx}"

# RXTX options (only works in some versions)
OPTIONS="${OPTIONS} -Dgnu.io.rxtx.NoVersionOutput=true"
[ -n "${DEBUG}" ] && echo "OPTIONS: '${OPTIONS}'"

if [ -n "$JMRI_SERIAL_PORTS" ] ; then
    JMRI_SERIAL_PORTS="$JMRI_SERIAL_PORTS,"
fi

if [ "$OS" = "macosx" ] ; then
    ALTPORTS=
else
    # locate alternate serial ports
    ALTPORTS=$( echo "$JMRI_SERIAL_PORTS $( ls -fm /dev/ttyS* /dev/ttyUSB* /dev/ttyACM* /dev/ttyAMA* 2>/dev/null )" | tr -d " \n" | tr "," ":" )
    if [ "${ALTPORTS}" ] ; then
        ALTPORTS=-Dgnu.io.rxtx.SerialPorts=${ALTPORTS}
    fi
    [ -n "${DEBUG}" ] && echo "ALTPORTS: '${ALTPORTS}'"
fi

declare -a DOCK_OPTIONS
# Apple dock extensions to java get mangled by bash if included in ${OPTIONS}
if [ "$OS" = "macosx" ] ; then
    DOCK_OPTIONS=(-Xdock:name="${APPNAME}" -Xdock:icon="${APPICON}")
    [ -n "${DEBUG}" ] && echo "DOCK_OPTIONS: '${DOCK_OPTIONS[@]}'"
fi


RESTART_CODE=100
EXIT_STATUS=${RESTART_CODE}
while [ "${EXIT_STATUS}" -eq "${RESTART_CODE}" ] ; do

    "${JAVACMD[@]}" "${DOCK_OPTIONS[@]}" ${OPTIONS} ${ALTPORTS} -cp "${CP}" "${CLASSNAME}" ${CONFIGFILE}

    EXIT_STATUS=$?
    [ -n "${DEBUG}" ] && echo Exit Status: "${EXIT_STATUS}"
done

exit $EXIT_STATUS
