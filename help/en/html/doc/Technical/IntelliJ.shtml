<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
<title>JMRI: Building with IntelliJ IDEA</title>
<meta name="author" content="Egbert Broerse">
<meta name="keywords" content="JMRI technical code IntelliJ IDEA 15">

<!--#include virtual="/Style" -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

<div id="mainContent">
	<!-- -------- -->
	<!--  Teaser  -->
	<!-- Optional -->
	<!-- -------- -->


	<h1>JMRI: Building with IntelliJ IDEA</h1>

	<p>
		IntelliJ IDEA Community Edition (available from <a href="https://www.jetbrains.com/idea/">www.jetbrains.com/idea/</a>)
		makes a great platform for working with JMRI and Java.</p>

	<p>
		JMRI developers use Git for source control. Source control using Git
		is including as part of the IntelliJ IDEA 15 download. For more
		information for getting the JMRI source, see <a
			href="getgitcode.shtml">JMRI: Getting the Code</a>.
	</p>

	<p>These instructions were developed and tested using IntelliJ IDEA 15 Community Edition (free).</p>
	<p>Also note that at the time of writing this help document
		JMRI 4 requires Java version 8. You must confirm that JRE 8 is the
		default Java Runtime Environment in IntelliJ (see <a href="#setant">Settings</a>).</p>

	<ol>
		<li>Enter your GitHub username and password in the authentication
			fields.</li>
		<li>Click the "Next" button and the Branch Selection screen
			should appear.</li>
	</ol>

	<a name="install"></a>
	<h2>Installing IntelliJ IDEA</h2>
	<p>After downloading and running the installer for your OS, configure the IntelliJ application as follows:<br>
	
	<h4>On OS X</h4>
	<ul>
	<li>Right click the IntelliJ IDEA application and choose "Show contents".
	<li>In the folder, open the <code>bin</code> folder and right click idea.vmoptions, choose Open with... and select Texteditor.
	<li>Add the line "=true" to the file (in /Applications/IntelliJ IDEA 15 CE.app/bin/idea.vmoptions)<br>
		<a href="images/IjAppBinDir.png">
	  <img src="images/IjAppBinDir.png" width="267" height="108" alt="IntelliJ vmoptions"></a>
	</ul>

<p>Start IntelliJ and choose "Preferences" from the application menu:<br>
		<a href="images/IjPrefsFileEncodings.png">
	  <img src="images/IjPrefsFileEncodings.png" width="516" height="263" alt="IntelliJ vmoptions"></a>


<a name="getgit"></a>
	<h2>Getting the JMRI Source using Git</h2>
	To get the source code from GitHub into IntelliJ you need to do the
	following:

	<ol>
		<li>Go to <a href="https://github.com/">GitHub.com</a> and create
			an account.
		<li>In GitHub web, Fork the JMRI/JMRI to your own remote copy (see <a href="getgitcode.shtml#get">Get the Code</a>)
		<li>Open IntelliJ.</li>
		<li>From the main menu bar select [File] then [New] -&gt; [Project from Version Control]</li>
		<li>Click on "GitHub"<br>
		<a href="images/IjImportMenu.png">
	  <img src="images/IjImportMenu.png" width="366" height="100" alt="IntelliJ Git import pane"></a>
		<li>In the pane that opens, enter a location on disk. Give the project a name like the original i.e. "JMRI"<br>
		<a href="images/IjImportProject1.png">
	  <img src="images/IjImportProject1.png" width="396" height="97" alt="IntelliJ Git import pane1"></a>
		<li>Click Next, select "Create project from existing sources" and  click Next again<br>
		<a href="images/IjImportProject2.png">
	  <img src="images/IjImportProject2.png" width="396" height="123" alt="IntelliJ Git import pane2"></a>
		<li>Click Mark all and then Finish<br>
		<a href="images/IjImportProject3.png">
	  <img src="images/IjImportProject3.png" width="396" height="119" alt="IntelliJ Git import pane3"></a><br>
		The Clone Repository pane should appear:<br>
		<a href="images/IjCloneRepo.png">
	  <img src="images/IjCloneRepo.png" width="313" height="100" alt="IntelliJ Git import pane3"></a></li>
	</ol>

<a name="ijprojectwin"></a>
<h2>The Project window</h2>

	<p>After cloning is completed, the IntelliJ Project window
		should look like this:<br>
	<a href="images/IjProjectPanel.png">
	<img src="images/IjProjectPanel.png" width="342" height="372" alt="IntelliJ main project window"></a></p>
  <p>Along the edges of the window are several groups of tools, most used are Project on the left, Ant Build on the right and Version Control at the bottom.<br>
  <strong>Git: master</strong> at the bottom righthand corner shows the current Branch and serves as a menu to change to another Branch:<br>
	<a href="images/IjGitBranches.png">
	<img src="images/IjGitBranches.png" width="323" height="172" alt="IntelliJ main project window"></a></p>
		
	<a name="setant"><h2>Building and running JMRI using Ant</h2></a>
  <p>
	We recommend that before you try to build and run one of the
	applications within IntelliJ that you run the ant build.xml within
	IntelliJ. This will create the necessary directories, load some resource
	icons, and create needed Java files. To run the ant
	build.xml you need to do the following:

	<ol>
		<li>Ant needs a JDK (Java Development Kit) in order to run the
			supplied "build.xml" file. The IntelliJ IDEA 15 download comes with a
			JDK, but you have to configure ant to use the right JDK.
			<li>To verify the JDK is set to
			java 1.8, open the Ant Build tab (top right), click the build.xml file in the Ant Build list and select the Properties button at the top right of the pane:<br>
			<a href="images/IjAntPropertiesOpen.png">
			<img src="images/IjAntPropertiesOpen.png" width="259" height="217" alt="IntelliJ Ant menu"></a>			
			</li>
			<li>As "Run under JDK" select <strong>1.8</strong><br>
			<a href="images/IjAntBuildFilePropertiesPane.png">
			<img src="images/IjAntBuildFilePropertiesPane.png" width="318" height="175" alt="IntelliJ Ant Settings"></a>			
			</li>
		<li>Select the build.xml file, 
			right click, and select Run, or click the green Run button at the top of the pane. This should start the ant build. Follow any messages in the Event Log that will pop up from he bottom edge of the Project window.</li>
	</ol>

	<p>If the ant build succeeds, you can now launch any of the JMRI
		applications from ant.</p>

	<a name="build"></a>
	<h2>Building and running JMRI using IntelliJ</h2>

	<p>After completing the ant build as described above, you need to
		refresh the jmri directory. Right click on the jmri Project directory name and
		select "Refresh". The refresh operation should trigger a build of the
		workspace and the build should complete without error.
	<p>To run an application, do the following:</p>

	<ol>
		<li>From the "Ant Build" list, right click the desired package i.e. decoderpro.xml and select "Run Configurations..."
<!-- still to do: write instructions for configurations
		<li>On the left side, highlight "Java Application", then press
			the "New" icon above it. The icon looks like a document with a plus
			sign on the upper-right.</li>

		<li>You should now have a new "Main" tab highlighted. Above that,
			replace "New_configuration" with "DecoderPro". Below it, enter "jmri"
			(lower case important) for "Project:" and
			"apps.DecoderPro.DecoderPro" for "Main class:".</li>

		<li>Select the "Arguments" tab, and under VM arguments enter (You
			should probably cut and paste): <br> <pre>
-Xms10m
-Xmx300m
-Djava.security.policy=lib/security.policy 
-Dapple.laf.useScreenMenuBar=true
</pre> If you're using a 32 bit windows system add the library path: <pre>
-Djava.library.path=.;lib;lib/windows/x86 
</pre> Note if you're using a 64 bit windows system change the library path
			to: <pre>
-Djava.library.path=.;lib;lib/windows/x64
</pre>
		</li>

		<li>Optional, select the "Common" tab, the section on "Display in
			favorites menu", check the boxes next to "Run" and "Debug"</li>

		<li>If you'd like to create targets to make it easy to run
			PanelPro and AllTests, repeat the above steps to create a new "Java
			Application" except specifying "apps.PanelPro.PanelPro" and
			"apps.tests.AllTest" respectively.</li>

		<li>Click "Apply", then "Close" (You could click "Run" at this
			point, but we've got a little more to do)</li>

		<li>You should now be back to the usual Eclipse navigator view,
			where most development work is done. To see some particular java
			file, expand the "java" folder at the left, then the "src" folder,
			navigating down to the file you want.
		<li>To run DecoderPro, select it under "Run History" from the
			"Run" menu. Once you've done that once, you can just click the "Run"
			icon on the toolbar to rerun the last program.
	</ol>
end of Eclipse copy -->

	<a name="push"></a>
	<h2>Pushing changes to your GitHub branch</h2>

	The standard practice for getting your changes included in the main JMRI
	code repository is to Commit them to your local repository
	periodically, then when ready to publish "Push" an entire set of
	changes to your own remote repository on GitHub, and then finally
	making a Pull Request for somebody to "pull" your changes into the main JMRI
	repository. See
	<a href="GitFAQ.shtml">JMRI: Git FAQ</a> "Setting up a GIT environment
	for JMRI Developers" for more information.

	<p>It is also good practice to "Pull" all of the recent changes
		from the main JMRI repository before performing your Commits. After a
		"pull" your workspace and eventually your remote GitHub repository
		will be in synch with the main JMRI repository. To perform a "Pull":
		<ul>
		<li>Select your project i.e. <strong>JMRI</strong> in the Project tab, right click and select "Remote" -&gt; "Git" then "Pull" from the context menu.<br>
			<a href="images/IjCommitMenu1.png">
			<img src="images/IjCommitMenu1.png" width="345" height="372" alt="IntelliJ Pull"></a>			
			</li>

	<p>Pushing to your GitHub Branch:
	<ul>
		<li>First, commit your changes to the local repository on your
			computer
			<p>To commit a set of changes, select your project i.e. <strong>JMRI</strong> in the Project tab, right click and select "Git" -&gt; "Commit Directory..." from the context menu.<br>
			<a href="images/IjCommitMenu1.png">
			<img src="images/IjCommitMenu1.png" width="345" height="372" alt="IntelliJ Commit menu"></a>			
			</li>
				<li>Enter a
				Commit Message and (de)select the files you wish to commit. Choose your name as Author:<br>
			<a href="images/IjCommitPush2.png">
			<img src="images/IjCommitPush2.png" width="361" height="284" alt="IntelliJ Commit"></a>			
			<li>Click the "Commit" button<br>
			<a href="images/IjCommitPush.png">
			<img src="images/IjCommitPush.png" width="362" height="197" alt="IntelliJ Commit and Push"></a>									
		<li>When you hover over the Commit button, you may choose "Commit and Push..." to immediately continue to Push a set of changes from your local repository to
			your repository on GitHub (so others can access it and
			pick it up for inclusion into JMRI).
			<p>
				Before you can push your changes to GitHub for the first time,
				you'll have to <a href="gitdeveloper.shtml#repo">create your own
					GitHub repository</a> (which you may have done above) and "fork" the
				JMRI repository. Log on to your account at <a
					href="https://github.com/">GitHub.com</a> and then navigate to the
				JMRI repository <a href="https://github.com/JMRI/JMRI">https://github.com/JMRI/JMRI</a>
				In the upper right hand corner of the page you will find a button
				labeled "Fork". Press the "Fork" button to create your own
				repository of the JMRI source.
			</p>
			<p>To push to your GitHub repository, again select "Team" then
				"Remote" then "Configure Push to Upstream". In the "Configure Push"
				window, click on the "Push URIs" and then the "Add" button. In the
				"New URI" window enter the URL of your
				GitHub repository along with your username and password. After
				pressing Finish the "Configure Push" window should look like the
				image below:</p>
				<a href="images/EclipseConfigurePush.png">
				<img src="images/EclipseConfigurePush.png" width="350" height="322" alt="Eclipse Error pane"></a>
			<p>Press either the "Save and Push" or the "Save" button. Later
				when you want to push new changes to your repository on GitHub, you
				can simply commit them as described above, and then use the
				"Push" icon in the Synchronize window.</p>
		<li>Finally, submit a "Pull Request" to the main JMRI code repository on
			the GitHub website.
			<p>
				To do this, start by signing on to the <a href="http://github.com">GitHub
					web site</a>, selecting your repository and clicking the <a
					href="gitdeveloper.shtml#pull">Pull Request button</a>. For more
				info, see the <a href="gitdeveloper.shtml#pull">developer
					instructions,</a>
			</p>
	</ul>

	<a name="errors"></a>
	<h2>Compiler Errors and Warnings</h2>

	The default IntelliJ compiler configuration may produce unnecessary
	warnings. You can adjust the warnings to match the screen shots as
	shown below by going to Window -&gt; Preferences and selecting
	"Java -&gt; Compiler -&gt; Errors/Warnings".

  <!--#include virtual="/Footer" -->

  </div><!-- closes #mainContent-->
</div> <!-- closes #mBody-->
</body>
</html>
