<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html> <head>
<title><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Git FAQ
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code Git FAQ">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

<div id="mainContent">

<h1>JMRI: Git FAQ</h1>

  <p>This is a list of Frequently Asked Questions for Git,
     particularly regarding how we use it with JMRI.</p>

  <p>There's a
  <a href="getgitcode.shtml">separate page</a>
  on how to 
  <a href="getgitcode.shtml">get the code with Git</a>.</p>

  <p>See also the <a href="index.shtml">Technical index</a>
     for more information on maintaining JMRI code.</p>


<h2 id="install">Installing Git</h2>

Git is free software.  Depending on your computer type and your preferences,
there are several ways to install it. There's more info on
<a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">the Git web site</a>.

<UL>
<li>Get it from the <a href="http://git-scm.com/downloads">Git web site</a>.
<li>It comes with the GitHub Desktop application,
    available from the <a href="https://desktop.github.com">download page</a>.
<li>On the Mac, it's included when you <a href="https://developer.apple.com/xcode/download/">install XCode</a>.
<li>On Linux you can use your package installer, e.g. <code>sudo yum install git</code> or <code>sudo apt-get install git</code>.
</ul>


<h2 id="migrateSVN">Migrating un-committed changes from a SVN checkout</h2>

If you have changes to the JMRI code in an existing SVN checkout, here's what we recommend:

<ol>

<li>&quot;svn update&quot; to the HEAD of SVN. You should be doing this routinely anyway, 
because you'll need to do it before your changes can eventually be submitted.  
Do this now and solve any problems.

<li>Once the SVN repository is frozen, do <code>svn update</code> again.  
Solve any conflicts, etc.

<li>Do <code>svn status</code> and save the output.  
Double check that no conflicts are showing.

<li>Do <code>svn diff</code> and save the output, e.g. as <code>patch.txt</code>.

<li>Once Git is working and up, clone a copy of the repository to your machine.
(See the 
<a href="getgitcode.shtml">previous page for instructions</a>.)

<li>In your new clone, do <code>git checkout tags/svn-30001</code>.  
That sets your working copy to be exactly the same as the last contents of SVN, 
the same as the base for the <code>svn diff</code> you took earlier.

<li>Then apply the changes between SVN and your code with <code>patch -p0 &lt; patch.txt</code>  
(change that to refer to the location of the <code>svn diff</code> output file you saved in step 4)

<li>If you had any completely new files in the SVN working directory, 
i.e. ones with &quot;A&quot; or &quot;?&quot; status:
    <ul>
    <li>Copy those files into the corresponding 
        place in your Git checkout.
    <li>To <code>git add (pathname)</code> on each of them to tell Git about them
    </ul>

<li>Do a <code>git status</code> to get a list of changes.
You should see the same changed files as the &quot;svn status&quot; you saved earlier.

<li><code>git stash save</code>

<li><code>git checkout master</code>

<li><code>git stash pop</code> - Depending on how much progress has taken place in Git, 
this might show some conflicts.  If so, you have to resolve them here.

</ol>  
Now you can start developing, without having lost anything.



<h2 id="branch">Branching</h2>

With SVN and CVS, you're check out a &quot;working directory&quit; to make your
changes in, work for a while, and eventually commit them back to the main repository.
<p>
Git works on a different idea. 
Instead of multiple working directories, you have a single repository that's been
&quot;cloned&quot; from the main repository.  If you're making individual little
changes, you can work directly on the &quot;master&quot; branch within it.
<p>
If you want to work on something more complicated, you put it on a branch so you can work
on it independently.  You can even have multiple branches at the same time, moving between
them as you work on different projects.

<p>
We need to be able to recognize the purposes of branches, so we recommend that you 
name them starting with your initials.  After that, it's up to you:  
&quot;abc-decoder-xml-change&quot;, 
&quot;abc-2015-09-14&quot;, 
&quot;abc-next-cool-thing&quot;
are all fine.  With the initials, we know it's you, and you can sort the rest.

<p>
To create a branch called &quot;branchname&quot;, you do 

<pre><code>git checkout -b branchname</code></pre>

The &quot;-b&quot; says to create the branch.  To switch to an existing branch, just leave
out that option:

<pre><code>git checkout branchname</code></pre>

To see all the current branches, do

<pre><code>git branch</code></pre>

If other changes are added to the master branch, you can keep your 
branch up to date by merging those changes in with

<pre><code>
git checkout branchname<br/>
git merge -m"merging to current contents of master" master
</code></pre>

(If you leave off the message option, you'll be prompted with an editor) If anything
merged in, you can then commit it to your branch.

When you're done, merge your changes back into the common line of development with

<pre><code>
git checkout master<br/>
git merge -m"merging to current contents of master" branchname
</code></pre>

followed (eventually) by a commit. You can then delete your branch (if you're finally done 
with it) with
<pre><code>
git checkout master<br/>
git branch -d branchname
</code></pre>



<h2>Other Topics</h2>
<h3>Embedded Properties</h3>

When JMRI was originally using CVS, we used lines like:

<code>
<pre>
# The next line is maintained by CVS, please don't change it<br/>
# $Revision$
</pre>
</code>

as an additional way of tracking file versions.  When we migrated to 
SVN, we kept those in certain files, like decoder XML, properties files, etc,
that users are likely to edit and submit back for inclusion.  

<p>
But with Git, 
<!-- 
    there's really no good way to maintain these automatically,
    http://thomas-cokelaer.info/blog/2014/12/moving-from-svn-to-git-id-equivalent/
    
    see .git/info/attributes
    # see man gitattributes
    # expands $Id$ but not $Revision$ $Author$
    *.xml ident
-->
there's less need for these. 
So we'll be removing these lines as time allows.
If you're working on a file and happen to see one, usually
in the header, you can just delete it.  (If it has somebody's name,
you might want to add that to the copyright notice if there is one.)

<!--#include virtual="/Footer" -->

</div><!-- closes #mainContent-->
</div> <!-- closes #mBody-->
</body>
</html>

</title>
</head>

<body>
<h1></h1>

<!-- test comment -->

<hr>
<address></address>
</body> </html>
