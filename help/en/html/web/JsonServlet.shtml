<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">

<head>
  <meta name="generator"
    content="HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">
  <!-- Copyright 2015 -->
  <!-- $Id$ -->

  <title>JMRI JSON Servlet</title><!-- Style -->
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
  <style type="text/css">
    table#jsonResponses {
      border-collapse: collapse;
    }

    table#jsonResponses td {
      border: 1px solid grey;
      width: 33%;
    }

    table.data {
      margin: initial;
      margin-left: 2em;
    }

    code {
      white-space: normal;
    }
  </style><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <h1>JMRI JSON Servlet</h1>

      <p>The JMRI <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> Servlet provides a
        RESTful API and a <a href="https://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
        API for accessing and editing user defined objects in JMRI. This document describes how to enable
        the JMRI JSON servlet and provides some examples of use.</p>

      <p><strong>Note</strong> the JMRI JSON protocol is documented in <a
          href="http://jmri.org/JavaDoc/doc/jmri/server/json/package-summary.html">JMRI API Documentation</a>.</p>

      <h2><a name="jmri_json_servlet">JMRI JSON Servlet</a></h2>

      <h2>Setting up the JSON Servlet</h2>

      <p>The JMRI JSON Servlet is a feature that is part of the Web
        Server. To use this service:</p>

      <ol>
        <li>Ensure the web server's port is unique:</li>

        <li style="list-style: none">
          <ol>
            <li>Open the Preferences dialog</li>

            <li>Click <b>Web Server</b> on the left side</li>

            <li>Ensure the port number is unique (for example
              12080). Other ports are used by WiThrottle, JSON
              Server, etc.</li>

            <li>Click Save</li>
          </ol>
        </li>

        <li>Click <b>Actions</b> and <b>Start Web Server</b> to
          ensure the web server is running</li>

        <li>If you want the web server to run each time you start
          JMRI:</li>

        <li style="list-style: none">
          <ol>
            <li>Open the <b>Preferences</b> dialog</li>

            <li>Select <b>Start Up</b></li>

            <li>Click <b>Add &#9662;</b></li>

            <li>Select <b>Perform action...</b></li>

            <li>Select <b>Start Web Server</b></li>

            <li>Click <b>OK</b></li>
          </ol>
        </li>
      </ol>

      <h2>Using HTTP JSON</h2>

      <p>The <b>HTTP</b> feature of the servlet responds to the
        following URL patterns:</p>

      <ul>
        <li>/json/<i>&lt;type&gt;</i> -- used with HTTP GET to
          retrieve a list from JMRI, or with PUT to add an item to a
          list</li>

        <li>/json/<i>&lt;type&gt;</i>/<i>&lt;systemName&gt;</i>
          -- used with HTTP GET to retrieve a single item from a
          list, or with POST to update an existing item</li>
      </ul>

      <p>To get a list of the JSON types that your installation of
        JMRI supports, query your JMRI application with
        <code>myjmri:12080/json/type</code> This will return a JSON
        array with a number of objects in the form:</p>

      <code>{"type":"type","data":{"name":"metadata","server":true,"client":true}}</code>

      <p>where <code>type</code> is the type of response, and data contains:</p>
      <dl>
        <dt>name</dt>
        <dd>The type that can be queried; in this example, metadata about the
          JMRI application itself.
        <dt>server</dt>
        <dd><code>true</code> if the type is used in a response or message from the JMRI
          server; <code>false</code> if the type is only used in a query or message from the client.</dd>
        <dt>client</dt>
        <dd><code>true</code> if the type is used in a query or message from the client;
          <code>false</code> if the type is only used in a response or message from the JMRI server.</dd>
      </dl>

      <p>The details of what a valid JSON query, response, or message is are in
        <a href="http://json-schema.org">JSON schema</a>.
        To get the JSON schema for a JMRI type, query your JMRI application with
        <code>myjmri:12080/json/schema/<i>&lt;type&gt;</i></code> This will return a JSON
        array with two objects; the schema for a request or message from the client, and
        the schema for a response or message from the JMRI server. A schema object contains:
        <dl>
          <dt>name</dt>
          <dd>The type the schema is for.</dd>
          <dt>server</dt>
          <dd><code>true</code> if the schema is for a response or message from the
            JMRI server; <code>false</code> if the schema is for a query or message from the client.</dd>
          <dt>schema</dt>
          <dd>The schema as a <a href="http://json-schema.org"></a>JSON schema</a> object.</dd>


          <p>The returned data consists of two parts:</p>

          <ul>
            <li><b>Type:</b> The type of item returned, which in this
              case is "power"</li>

            <li><b>Data:</b> Data that is specific to the type of
              object returned. For example, in this case the state of
              track power</li>
          </ul>


          <h2>Using HTTP JSON POST/PUT/DELETE</h2>

          <p>You can also insert, update, or delete items in the lists
            above using the HTTP POST, PUT, and DELETE methods. Not all
            combinations are supported.</p>

          <p>You can use these type names to set values. Continuing
            with the power example above, you can turn the power on by
            posting to a URL like this:</p>
          <pre>
    myjmri:12080/json/power
</pre>

          <p>With this as the body</p>
          <pre>
    {"state":2}
</pre>

          <h2>WebSocket</h2>

          <p>The <b>WebSocket</b> feature of this servlet currently
            handles JSON strings in four different forms:</p>

          <ul>
            <li>individual item state requests in the form:
              <code>{"type":"turnout","data":{"name":"LT14"}}</code> that
              are passed to type-specific handlers. These requests will
              initiate "listeners", which will send updated responses
              every time the item's state changes.

              <ul>
                <li>an item's state can be set by adding a
                  <strong>state</strong> node to the <em>data</em> node
                  in an HTTP POST request:
                  <code>{"type":"turnout","data":{"name":"LT14","state":4}}</code></li>

                <li>individual types can be created if the request is
                  an HTTP PUT request. Note that not all types support
                  this.</li>
              </ul>
            </li>

            <li>list requests in the form:
              <code>{"list":"trains"}</code> or
              <code>{"type":"list","list":"trains"}</code> that return an
              array of items, or an empty array (<code>[]</code>). This request
              initiates a "listener" which will resend
              the entire list when items are added or removed, as well as
              set individual listeners for each item (see above).</li>

            <li>a heartbeat in the form <code>*</code> or
              <code>{"type":"ping"}</code>. The <code>*</code> heartbeat
              gets no response, while the JSON heartbeat causes a
              <code>{"type":"pong"}</code> response.</li>

            <li>a signoff in the form: <code>{"type":"goodbye"}</code>
              to which an identical response is sent before the
              connection gets closed.</li>
          </ul>

          <p>The <b>WebSocket</b> feature of the servlet can be seen by
            browsing to the <b>/json/</b> url, where a <b>JSON
              console</b> is providing for testing.<br>
            Example commands and responses:</p>

          <h2><a name="jmri_json_server">JMRI JSON Server</a></h2>

          <p>The JMRI JSON server is functionally identical to the JSON
            WebSocket, but running over a standard network socket.</p>

          <h2><a name="jquery_jmri">jquery.jmri</a></h2>

          <p><em>jquery.jmri</em> is a JavaScript library that ships
            with JMRI and makes the JSON protocol support just work on
            most current browsers.<br />
            Note: The support for non-WebSocket browsers is limited by the number
            of open connections allowed. Maybe 5-10 active objects.</p>

          <p>Examples of use of the jquery.jmri JavaScript library that
            ships with JMRI include (example links assume you are reading
            this on your JMRI web server):</p>

          <ul>
            <li><a href="/operations">Operations Conductor</a>
              (implemented in <a
                href="https://github.com/JMRI/JMRI/blob/master/web/js/operations.js">/js/operations.js</a></li>

            <li><a href="/panel">Panel</a> (implemented in <a
                href="https://github.com/JMRI/JMRI/blob/master/web/js/panel.js">/js/panel.js</a></li>

            <li><a href="/json">JSON Console</a> (implemented in
              <a href="https://github.com/JMRI/JMRI/blob/master/web/js/json-console.js">/js/json-console.js</a></li>

            <li><a href="/web/power.html">
                Power Demonstration</a> (view the page source for the implementation)</li>
          </ul>
          <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>

</html>