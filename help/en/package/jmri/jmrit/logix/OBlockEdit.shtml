<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
 <title>
      JMRI: OBlock Add/Edit Help
 </title>
    <meta content="Bob Jacobsen" name="Author">
    <meta name="keywords" content="JMRI help OBlock Table">

<!-- Style -->
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->
  <div class="nomenu" id="mBody">
    <div id="mainContent">

<h1>Creating and Editing OBlocks, Portals and OPaths</h1>
<p>Start by entering each occupancy Block of your layout into the <b>Occupancy Block Table</b>.
<ol>
<li>Enter a system name for the OBlock. 
If you do not preface the entry with "OB", it will be prepended to
your entry automatically.</li>
<li>(Optionally) Enter a User Name for the OBlock.</li>
<li>Enter the System Name or User Name of the detection Sensor for the Block.<br>
<i>You can skip entering this now and come back and enter it later.</i>
<p>Note: <i>(You can also read this note later)</i> If there is more than one Sensor that detects
occupancy of the the Block 'OR' them together and trigger a single internal Sensor to use
for this entry. For example, suppose LS10, LS11 and LS12 are detection Sensors and IS100
is an Internal Sensor. Presuming "Active" means Occupied, write a
Logix Conditional with state Variables:
<ul>
<li>Sensor "LS10" state is Sensor Active</li>
<li>Sensor "LS11" state is Sensor Active</li>
<li>Sensor "LS12" state is Sensor Active</li>
</ul>
Select <b>OR</b> as the Logic Operator<br>
and add as Actions:
<ul>
<li>On Change to True, set Sensor, "IS100" to Active.
<li>On Change to False, set Sensor, "IS100" to Inactive.
</ul>
Note: The row of a new entry will jump to its sorting position as ordered by System Name.
To continue editing the row, look for it at the top of the window. It will stay in place as
long as it has the same System Name.
</li>

<li>Next, enter the Portals between the Blocks into the <b>Portal Table</b>:<br>
For each point between the the Blocks you have defined in the Occupancy Block table,
enter a Portal row for each Portal (gap) between the two Blocks.  
<p>A pair of adjacent Blocks 
may have several Portals between them. This is expected, so just give each Portal a unique
name. The Block names can be dragged from the Occupancy Block table to save typing.</p>
<p>
Note: The computer will notify you from time to time until you have entered a block on each side
of the portal name.  It doesn't matter on which side of the portal name you enter a block name, 
just be sure to enter both sides
<p>
Note: It may be helpful to open the <b>Block-Portal Cross Reference Table</b> to review whether all the
portals have been entered.
<p>
Next, If there are Signals at a Portal, enter them into the <b>Signal Table</b>.
</li>
<li>5Enter the system or user name of the signal. This may be either a SignalMast or SignalHead.
<li>6Enter the name of the block <b><i>facing</i></b> the signal into the <b>From (Approach) Block</b>
column. It is important that the approaching block of the signal is correctly named.  This is the block
that will detect when a speed change might be needed.
<li>Enter the portal name or the name of the block whose entrance is protected.   
<li>Enter any delay of milliseconds to wait after entering the approach block before changing 
the train speed.  (This time delay is used only when the signal indicates a speed change.)   
</ul>
Next, identify the Paths in each block.
<ul>
<ul>
Reminder: You may use 'Drag and Drop' to enter text.  When selecting an item to drag, it may require
two clicks; one to select the row and a second to select the column entry.  Holding the second click down,
you can drag the text from that row, column field.
</ul>
<b>9.</b> Moving through the Occupancy Block table row by row, complete these steps:
<ul>
<li>9a. Press the <b>Paths</b> button and open the <b>Block-Path</b> table for the row
<li>9b. Enter a path name for a path within the Block of the row in the <b>Path Name</b> column.<br>
Note: The name of the Block is in quotes in the title bar of the table.
<li>9c. Enter the names of the portals where the path enters and exits the block.<br>
Note: It doesn't matter on which side of the path name you enter a portal name.  Dead end
spurs will only have one portal.
</ul>
<li>10 Finally, complete the definition of each Path in each Block. For each path in each <b>Block-Path table</b>, complete these steps:
<ul>
<li>10a. Press the <b>Turnouts</b> button and open the <b>Block-Path-Turnout</b> table for the each
row in the <b>Block-Path</b> table
<li>10b. Enter the System Name or User Name of a Turnout in the Path.<br>    
Note: The name of the Path and its Block are displayed in quotes in the title bar of the table.
<li>10c. Enter the position of the Turnout in the <b>Turnout Setting</b> column - either 'Closed'
or 'Thrown'.
</ul>
Most likely you will have encountered several dialogs urging you to fix this or that, so try to 
resolve all of them.
<li>Now, you are ready to define some Routes for Warrants. Of course, there will probably still 
be a few errors or missing items; the 'Create Warrant' frame provides a tool to find and fix them.
<ul>
<li>Select <b>Create New Warrant</b> from the <b>Warrants</b> menu in a Panel Editor Panel.
</ul></li>
</ol>
 
<p>To read about how OBlocks, Portals and OPaths can be used to generate train routes and make
automated train scripts, see <a href="../logix/Warrant.shtml"> Warrants. </a>
<p>
Also See <a href="../logix/WarrantTable.shtml"> Warrant Table help</a>
for more details on creating and editing warrants.

<!--#include virtual="/Footer" -->
 </div><!-- closes #mainContent-->
</div> <!-- closes #mBody-->
</body>
</html>

