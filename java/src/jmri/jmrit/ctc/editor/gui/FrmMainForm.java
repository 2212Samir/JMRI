/*
For this warning:
Note: C:\Users\NetBeansJMRI\Documents\NetBeansProjects\CTCTest\src\packageTest\FrmMainForm.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Do this:
    Project Properties -> Build -> Compiling in "Additional compiler options" at the bottom:
    put in "-Xlint:unchecked"

https://stackoverflow.com/questions/494869/file-changed-listener-in-java
https://blogs.oracle.com/thejavatutorials/watching-a-directory-for-changes-mdash-file-change-notification-in-nio2

Set look and feel at design:
https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
At runtime (dynamic):
https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html#dynamic
*/
package jmri.jmrit.ctc.editor.gui;

import jmri.jmrit.ctc.editor.code.Columns;
import jmri.jmrit.ctc.editor.code.CodeButtonHandlerDataRoutines;
import jmri.jmrit.ctc.editor.code.AwtWindowProperties;
import jmri.jmrit.ctc.editor.code.CheckJMRIObject;
import jmri.jmrit.ctc.editor.code.CommonSubs;
import jmri.jmrit.ctc.editor.code.CreateXMLFiles;
import jmri.jmrit.ctc.editor.code.InternalSensorManager;
import jmri.jmrit.ctc.editor.code.JMRIConnection;
import jmri.jmrit.ctc.editor.code.OriginalCopy;
import jmri.jmrit.ctc.editor.code.ProgramProperties;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import jmri.jmrit.ctc.ctcserialdata.CTCSerialData;
import jmri.jmrit.ctc.ctcserialdata.CodeButtonHandlerData;
import jmri.jmrit.ctc.ctcserialdata.ProjectsCommonSubs;

/**
 *
 * @author Gregory J. Bedlek Copyright (C) 2018, 2019
 */
public class FrmMainForm extends jmri.util.JmriJFrame {
    
    private static final String FORM_PROPERTIES = "FrmMainForm";
    private CTCSerialData _mCTCSerialData;
    private OriginalCopy _mOriginalCopy;
    private Columns _mColumns;
    private DefaultListModel<String> _mDefaultListModel;
    private ProgramProperties _mProgramProperties;
    private AwtWindowProperties _mAwtWindowProperties;
    private JMRIConnection _mJMRIConnection;
    private CheckJMRIObject _mCheckJMRIObject;

    @SuppressWarnings("LeakingThisInConstructor")   // Lazy, since this is NOT a multi-threaded program.
    public FrmMainForm() {
        super(true, true);
        initComponents();
        _mAwtWindowProperties = new AwtWindowProperties((java.awt.Window)this, "AwtWindowProperties.txt", FORM_PROPERTIES);
        _mProgramProperties = new ProgramProperties();
        _mJMRIConnection = new JMRIConnection(this);
        _mCheckJMRIObject = new CheckJMRIObject(_mJMRIConnection);
        newOrOpenFile(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    public void initComponents() {

        _mOpen_Save_SaveAs = new javax.swing.JFileChooser();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        _mPresentlyDefinedColumns = new javax.swing.JList<>();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        _mSIDI_Enabled = new javax.swing.JCheckBox();
        _mEdit_SIDI = new javax.swing.JButton();
        _mEdit_SIDI_Prompt = new javax.swing.JLabel();
        _mEdit_SIDL_Prompt = new javax.swing.JLabel();
        _mSIDL_Enabled = new javax.swing.JCheckBox();
        _mEdit_SIDL = new javax.swing.JButton();
        _mEdit_SWDI_Prompt = new javax.swing.JLabel();
        _mSWDI_Enabled = new javax.swing.JCheckBox();
        _mEdit_SWDI = new javax.swing.JButton();
        _mEdit_SWDL_Prompt = new javax.swing.JLabel();
        _mSWDL_Enabled = new javax.swing.JCheckBox();
        _mEdit_SWDL = new javax.swing.JButton();
        _mEdit_CO_Prompt = new javax.swing.JLabel();
        _mCO_Enabled = new javax.swing.JCheckBox();
        _mEdit_CO = new javax.swing.JButton();
        _mEdit_TUL_Prompt = new javax.swing.JLabel();
        _mTUL_Enabled = new javax.swing.JCheckBox();
        _mEdit_TUL = new javax.swing.JButton();
        _mEdit_IL_Prompt = new javax.swing.JLabel();
        _mIL_Enabled = new javax.swing.JCheckBox();
        _mEdit_IL = new javax.swing.JButton();
        reapplyPatternsButton = new javax.swing.JButton();
        _mEdit_TRL_Prompt = new javax.swing.JLabel();
        _mTRL_Enabled = new javax.swing.JCheckBox();
        _mEdit_TRL = new javax.swing.JButton();
        _mEdit_CB_Prompt = new javax.swing.JLabel();
        _mEdit_CB = new javax.swing.JButton();
        _mCB_EditAlwaysEnabled = new javax.swing.JLabel();
        changeNumbersButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        _mMoveUp = new javax.swing.JButton();
        _mMoveDown = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        _mJMRIConnectionStatus = new javax.swing.JLabel();
        _mCheckEverythingWithJMRI = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        _mFile = new javax.swing.JMenu();
        _mNew = new javax.swing.JMenuItem();
        _mOpen = new javax.swing.JMenuItem();
        _mSave = new javax.swing.JMenuItem();
        _mSaveAs = new javax.swing.JMenuItem();
        _mQuitWithoutSaving = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        _mFindAndReplace = new javax.swing.JMenuItem();
        _mFixErrors = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        _mDebugging = new javax.swing.JMenuItem();
        _mDefaults = new javax.swing.JMenuItem();
        _mFleeting = new javax.swing.JMenuItem();
        _mPatterns = new javax.swing.JMenuItem();
        _mGUIDesign = new javax.swing.JMenuItem();
        _mJMRIServerParams = new javax.swing.JMenuItem();
        _mHelp = new javax.swing.JMenu();
        _mHelpAbout = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Presently defined CTC O.S. sections:");

        _mPresentlyDefinedColumns.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        _mPresentlyDefinedColumns.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                _mPresentlyDefinedColumnsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(_mPresentlyDefinedColumns);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        _mSIDI_Enabled.setText("Enabled");
        _mSIDI_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mSIDI_EnabledActionPerformed(evt);
            }
        });

        _mEdit_SIDI.setText("Edit ");
        _mEdit_SIDI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_SIDIActionPerformed(evt);
            }
        });

        _mEdit_SIDI_Prompt.setText("Signal direction indicators:");

        _mEdit_SIDL_Prompt.setText("Signal direction lever:");

        _mSIDL_Enabled.setText("Enabled");
        _mSIDL_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mSIDL_EnabledActionPerformed(evt);
            }
        });

        _mEdit_SIDL.setText("Edit");
        _mEdit_SIDL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_SIDLActionPerformed(evt);
            }
        });

        _mEdit_SWDI_Prompt.setText("Switch direction indicators:");

        _mSWDI_Enabled.setText("Enabled");
        _mSWDI_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mSWDI_EnabledActionPerformed(evt);
            }
        });

        _mEdit_SWDI.setText("Edit");
        _mEdit_SWDI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_SWDIActionPerformed(evt);
            }
        });

        _mEdit_SWDL_Prompt.setText("Switch direction lever:");

        _mSWDL_Enabled.setText("Enabled");
        _mSWDL_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mSWDL_EnabledActionPerformed(evt);
            }
        });

        _mEdit_SWDL.setText("Edit");
        _mEdit_SWDL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_SWDLActionPerformed(evt);
            }
        });

        _mEdit_CO_Prompt.setText("Call On:");

        _mCO_Enabled.setText("Enabled");
        _mCO_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mCO_EnabledActionPerformed(evt);
            }
        });

        _mEdit_CO.setText("Edit");
        _mEdit_CO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_COActionPerformed(evt);
            }
        });

        _mEdit_TUL_Prompt.setText("Turnout locking:");

        _mTUL_Enabled.setText("Enabled");
        _mTUL_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mTUL_EnabledActionPerformed(evt);
            }
        });

        _mEdit_TUL.setText("Edit");
        _mEdit_TUL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_TULActionPerformed(evt);
            }
        });

        _mEdit_IL_Prompt.setText("Indication locking:");

        _mIL_Enabled.setText("Enabled");
        _mIL_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mIL_EnabledActionPerformed(evt);
            }
        });

        _mEdit_IL.setText("Edit");
        _mEdit_IL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_ILActionPerformed(evt);
            }
        });

        reapplyPatternsButton.setText("Reapply patterns to selected item");
        reapplyPatternsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reapplyPatternsButtonActionPerformed(evt);
            }
        });

        _mEdit_TRL_Prompt.setText("Traffic locking:");

        _mTRL_Enabled.setText("Enabled");
        _mTRL_Enabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mTRL_EnabledActionPerformed(evt);
            }
        });

        _mEdit_TRL.setText("Edit");
        _mEdit_TRL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_TRLActionPerformed(evt);
            }
        });

        _mEdit_CB_Prompt.setText("Code button:");

        _mEdit_CB.setText("Edit");
        _mEdit_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mEdit_CBActionPerformed(evt);
            }
        });

        _mCB_EditAlwaysEnabled.setText("Always enabled!");

        changeNumbersButton.setText("Change Switch and Signal Etc. #'s");
        changeNumbersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNumbersButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Write .xml files for JMRI GUI support");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        _mMoveUp.setText("Move up");
        _mMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mMoveUpActionPerformed(evt);
            }
        });

        _mMoveDown.setText("Move down");
        _mMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mMoveDownActionPerformed(evt);
            }
        });

        jLabel2.setText("JMRI Connection status:");

        _mJMRIConnectionStatus.setText("Unknown");

        _mCheckEverythingWithJMRI.setText("<html><center>Check<br>everything<br>with<br>JMRI</center></html>");
        _mCheckEverythingWithJMRI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mCheckEverythingWithJMRIActionPerformed(evt);
            }
        });

        _mFile.setText("File");

        _mNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        _mNew.setText("New");
        _mNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mNewActionPerformed(evt);
            }
        });
        _mFile.add(_mNew);

        _mOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        _mOpen.setText("Open...");
        _mOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mOpenActionPerformed(evt);
            }
        });
        _mFile.add(_mOpen);

        _mSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        _mSave.setText("Save");
        _mSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mSaveActionPerformed(evt);
            }
        });
        _mFile.add(_mSave);

        _mSaveAs.setText("Save As...");
        _mSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mSaveAsActionPerformed(evt);
            }
        });
        _mFile.add(_mSaveAs);

        _mQuitWithoutSaving.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        _mQuitWithoutSaving.setText("Quit without saving");
        _mQuitWithoutSaving.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mQuitWithoutSavingActionPerformed(evt);
            }
        });
        _mFile.add(_mQuitWithoutSaving);

        jMenuBar1.add(_mFile);

        jMenu2.setText("Edit");

        _mFindAndReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        _mFindAndReplace.setText("Find and Replace...");
        _mFindAndReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mFindAndReplaceActionPerformed(evt);
            }
        });
        jMenu2.add(_mFindAndReplace);

        _mFixErrors.setText("Fix Error(s)...");
        _mFixErrors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mFixErrorsActionPerformed(evt);
            }
        });
        jMenu2.add(_mFixErrors);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Configure");

        _mDebugging.setText("Debugging");
        _mDebugging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mDebuggingActionPerformed(evt);
            }
        });
        jMenu1.add(_mDebugging);

        _mDefaults.setText("Defaults");
        _mDefaults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mDefaultsActionPerformed(evt);
            }
        });
        jMenu1.add(_mDefaults);

        _mFleeting.setText("Fleeting");
        _mFleeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mFleetingActionPerformed(evt);
            }
        });
        jMenu1.add(_mFleeting);

        _mPatterns.setText("Patterns");
        _mPatterns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mPatternsActionPerformed(evt);
            }
        });
        jMenu1.add(_mPatterns);

        _mGUIDesign.setText("GUI Design");
        _mGUIDesign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mGUIDesignActionPerformed(evt);
            }
        });
        jMenu1.add(_mGUIDesign);

        _mJMRIServerParams.setText("JMRI Simple Server");
        _mJMRIServerParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mJMRIServerParamsActionPerformed(evt);
            }
        });
        jMenu1.add(_mJMRIServerParams);

        jMenuBar1.add(jMenu1);

        _mHelp.setText("About");

        _mHelpAbout.setText("About");
        _mHelpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _mHelpAboutActionPerformed(evt);
            }
        });
        _mHelp.add(_mHelpAbout);

        jMenuBar1.add(_mHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_mEdit_CB_Prompt)
                                    .addComponent(_mEdit_CB)
                                    .addComponent(_mCB_EditAlwaysEnabled))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_mEdit_SIDI_Prompt)
                                    .addComponent(_mSIDI_Enabled)
                                    .addComponent(_mEdit_SIDI)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_mEdit_CO_Prompt)
                                    .addComponent(_mCO_Enabled)
                                    .addComponent(_mEdit_CO))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_mEdit_TRL)
                                    .addComponent(_mTRL_Enabled)
                                    .addComponent(_mEdit_TRL_Prompt))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(_mEdit_SIDL_Prompt)
                            .addComponent(_mSIDL_Enabled)
                            .addComponent(_mEdit_SIDL)
                            .addComponent(_mEdit_TUL_Prompt)
                            .addComponent(_mTUL_Enabled)
                            .addComponent(_mEdit_TUL))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(_mEdit_IL)
                            .addComponent(_mIL_Enabled)
                            .addComponent(_mEdit_IL_Prompt)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_mEdit_SWDI_Prompt)
                                    .addComponent(_mSWDI_Enabled)
                                    .addComponent(_mEdit_SWDI))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_mEdit_SWDL)
                                    .addComponent(_mSWDL_Enabled)
                                    .addComponent(_mEdit_SWDL_Prompt))))
                        .addGap(0, 113, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(_mJMRIConnectionStatus)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_mMoveUp, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(_mMoveDown)
                                    .addComponent(jButton2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(deleteButton)
                                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(_mCheckEverythingWithJMRI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(changeNumbersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reapplyPatternsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_mJMRIConnectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addButton)
                                .addGap(18, 18, 18)
                                .addComponent(deleteButton))
                            .addComponent(_mCheckEverythingWithJMRI))
                        .addGap(18, 18, 18)
                        .addComponent(reapplyPatternsButton)
                        .addGap(18, 18, 18)
                        .addComponent(changeNumbersButton)
                        .addGap(18, 18, 18)
                        .addComponent(_mMoveUp)
                        .addGap(18, 18, 18)
                        .addComponent(_mMoveDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_mEdit_CB_Prompt)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(_mEdit_SIDI_Prompt)
                        .addComponent(_mEdit_SIDL_Prompt)
                        .addComponent(_mEdit_SWDI_Prompt)
                        .addComponent(_mEdit_SWDL_Prompt)))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_mSIDI_Enabled)
                    .addComponent(_mSIDL_Enabled)
                    .addComponent(_mSWDI_Enabled)
                    .addComponent(_mSWDL_Enabled)
                    .addComponent(_mCB_EditAlwaysEnabled))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_mEdit_SIDI)
                    .addComponent(_mEdit_SIDL)
                    .addComponent(_mEdit_SWDI)
                    .addComponent(_mEdit_SWDL)
                    .addComponent(_mEdit_CB))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_mEdit_CO_Prompt)
                    .addComponent(_mEdit_TRL_Prompt)
                    .addComponent(_mEdit_TUL_Prompt)
                    .addComponent(_mEdit_IL_Prompt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_mCO_Enabled)
                    .addComponent(_mTRL_Enabled)
                    .addComponent(_mTUL_Enabled)
                    .addComponent(_mIL_Enabled))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_mEdit_CO)
                    .addComponent(_mEdit_TRL)
                    .addComponent(_mEdit_TUL)
                    .addComponent(_mEdit_IL))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateJMRIStatus(final JMRIConnection.ConnectionStatus connectionStatus) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            switch (connectionStatus) {
                case UNKNOWN:
                    _mJMRIConnectionStatus.setText("<html><font color='orange'>Unknown</font></html>");
                    _mCheckEverythingWithJMRI.setEnabled(false);
                    break;
                case NOT_CONNECTED:
                    _mJMRIConnectionStatus.setText("<html><font color='red'>Not connected</font></html>");
                    _mCheckEverythingWithJMRI.setEnabled(false);
                    break;
                case CONNECTED:
                    _mJMRIConnectionStatus.setText("<html><font color='green'>Connected</font></html>");
                    _mCheckEverythingWithJMRI.setEnabled(true);
                    break;
                case CONNECTED_WRONG_VERSION:
                    _mJMRIConnectionStatus.setText("<html><font color='red'>Connected - wrong version</font></html>");
                    _mCheckEverythingWithJMRI.setEnabled(false);
                    break;
                case NOT_RUNNING:
                    _mJMRIConnectionStatus.setText("<html><font color='red'><b>Polling thread not running</b></font></html>");
                    _mCheckEverythingWithJMRI.setEnabled(false);
                    break;
                }
            }
        });
    }
    
    public void shutdown() {
        _mJMRIConnection.close();
        dispose();
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
//  Pre-scan and find the highest switch number used so far, and highest column number:
        int highestSwitchNumber = _mCTCSerialData.findHighestSwitchNumberUsedSoFar();
        int highestColumnNumber = _mCTCSerialData.findHighestColumnNumberUsedSoFar();
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgAddModifyCTCColumn dialog = new DlgAddModifyCTCColumn(this, true, _mAwtWindowProperties, _mColumns, false, highestSwitchNumber + 2, highestColumnNumber + 1, false);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    _mCTCSerialData.addCodeButtonHandlerData(CodeButtonHandlerDataRoutines.createNewCodeButtonHandlerData(_mCTCSerialData.getUniqueNumber(), dialog._mNewSwitchNumber, dialog._mNewSignalEtcNumber, dialog._mNewGUIColumnNumber, _mProgramProperties));
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (((String)_mPresentlyDefinedColumns.getSelectedValue()).contains(Columns.REFERENCES_PRESENT_INDICATOR)) {
            JOptionPane.showMessageDialog(this, "References exist, remove those first before delete allowed.");
            return; // Do nothing!
        }
        int selectedIndex = _mPresentlyDefinedColumns.getSelectedIndex();
        if (selectedIndex != -1) { // Safety:
            _mCTCSerialData.removeCodeButtonHandlerData(selectedIndex);
            _mColumns.updateFrame();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!validToSaveAtThisTime("Auto-save when exiting program", "\nOr you can quit without saving instead.")) return;
        _mCTCSerialData.writeDataToXMLFile(_mProgramProperties._mFilename);
        _mProgramProperties.close();
        _mAwtWindowProperties.saveWindowStateAndClose((java.awt.Window)this, FORM_PROPERTIES);
        shutdown();
    }//GEN-LAST:event_formWindowClosing

    private void _mPresentlyDefinedColumnsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event__mPresentlyDefinedColumnsValueChanged
        if (!evt.getValueIsAdjusting()) { // returns false is FINAL in chain.
            int selectedIndex = _mPresentlyDefinedColumns.getSelectedIndex();
//  Who designed this steaming pile of XXXX called Swing?  I guess at some level this makes sense:
//  It seems that "_mDefaultListModel.clear();" and "_mDefaultListModel.addElement..." BOTH
//  causes this routine to be called repeatedly with a -1 each time for selectedIndex.  In fact, for EACH 
//  "_mDefaultListModel.addElement..." it calls us with -1.  Go figure!  Why -1 in that case?
//  Isn't one being added that makes sense at a value >= 0?  Then why call us at all?  Sigh......
            _mColumns.setEntrySelected(selectedIndex);
        }
    }//GEN-LAST:event__mPresentlyDefinedColumnsValueChanged

    private void _mSIDI_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mSIDI_EnabledActionPerformed
        _mColumns.sidi_EnabledClicked(_mSIDI_Enabled.isSelected());
    }//GEN-LAST:event__mSIDI_EnabledActionPerformed

    private void _mSIDL_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mSIDL_EnabledActionPerformed
        _mColumns.sidl_EnabledClicked(_mSIDL_Enabled.isSelected());
    }//GEN-LAST:event__mSIDL_EnabledActionPerformed

    private void _mSWDI_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mSWDI_EnabledActionPerformed
        _mColumns.swdi_EnabledClicked(_mSWDI_Enabled.isSelected());
    }//GEN-LAST:event__mSWDI_EnabledActionPerformed

    private void _mSWDL_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mSWDL_EnabledActionPerformed
        _mColumns.swdl_EnabledClicked(_mSWDL_Enabled.isSelected());
    }//GEN-LAST:event__mSWDL_EnabledActionPerformed

    private void _mCO_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mCO_EnabledActionPerformed
        _mColumns.co_EnabledClicked(_mCO_Enabled.isSelected());
    }//GEN-LAST:event__mCO_EnabledActionPerformed

    private void _mTUL_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mTUL_EnabledActionPerformed
        _mColumns.tul_EnabledClicked(_mTUL_Enabled.isSelected());
    }//GEN-LAST:event__mTUL_EnabledActionPerformed

    private void _mIL_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mIL_EnabledActionPerformed
        _mColumns.il_EnabledClicked(_mIL_Enabled.isSelected());
    }//GEN-LAST:event__mIL_EnabledActionPerformed

    private void _mEdit_SIDIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_SIDIActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgSIDI dialog = new DlgSIDI(this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(), _mProgramProperties, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);
    }//GEN-LAST:event__mEdit_SIDIActionPerformed

    private void _mEdit_SIDLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_SIDLActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgSIDL dialog = new DlgSIDL(this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(), _mProgramProperties, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_SIDLActionPerformed

    private void _mEdit_SWDIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_SWDIActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgSWDI dialog = new DlgSWDI(this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(), _mProgramProperties, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_SWDIActionPerformed

    private void _mEdit_SWDLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_SWDLActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgSWDL dialog = new DlgSWDL(this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(), _mProgramProperties, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_SWDLActionPerformed

    private void _mEdit_COActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_COActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgCO dialog = new DlgCO(this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(), _mProgramProperties, _mCTCSerialData, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_COActionPerformed

    private void _mEdit_TULActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_TULActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgTUL dialog = new DlgTUL(this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(), _mProgramProperties, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_TULActionPerformed

    private void _mEdit_ILActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_ILActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgIL dialog = new DlgIL(this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(), _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_ILActionPerformed

    private void reapplyPatternsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reapplyPatternsButtonActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Confirm: This will update ALL 'pattern' fields.\n\n                    ------ Also: ------\n\nYou can do each section indidividually by\npressing the different edit buttons at the bottom of\nthe main form and doing it for only those fields\nin that editor screen.", "Warning", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            int index = _mColumns.getEntrySelectedIndex();
            CodeButtonHandlerData codeButtonHandlerData = _mCTCSerialData.getCodeButtonHandlerData(index);
            codeButtonHandlerData = CodeButtonHandlerDataRoutines.updateExistingCodeButtonHandlerDataWithSubstitutedData(_mProgramProperties, codeButtonHandlerData);
            _mCTCSerialData.setCodeButtonHandlerData(index, codeButtonHandlerData);
        }
    }//GEN-LAST:event_reapplyPatternsButtonActionPerformed

    private void _mTRL_EnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mTRL_EnabledActionPerformed
        _mColumns.trl_EnabledClicked(_mTRL_Enabled.isSelected());
    }//GEN-LAST:event__mTRL_EnabledActionPerformed

    private void _mEdit_TRLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_TRLActionPerformed
        CodeButtonHandlerData codeButtonHandlerDataSelected = _mColumns.getSelectedCodeButtonHandlerData();
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgTRL dialog = new DlgTRL( this, true,
                                    _mAwtWindowProperties, codeButtonHandlerDataSelected,
                                    _mCTCSerialData, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_TRLActionPerformed

    private void _mEdit_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mEdit_CBActionPerformed
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgCB dialog = new DlgCB(   this, true, _mAwtWindowProperties, _mColumns.getSelectedCodeButtonHandlerData(),
                                    _mProgramProperties, _mCTCSerialData, _mCheckJMRIObject);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);  // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event__mEdit_CBActionPerformed

    private void changeNumbersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNumbersButtonActionPerformed
        CodeButtonHandlerData temp = _mColumns.getSelectedCodeButtonHandlerData();
        InternalSensorManager internalSensorManager = new InternalSensorManager(_mCTCSerialData);
        DlgAddModifyCTCColumn dialog = new DlgAddModifyCTCColumn(this, true, _mAwtWindowProperties, _mColumns, true, temp._mSwitchNumber, temp._mGUIColumnNumber, temp._mGUIGeneratedAtLeastOnceAlready);
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dialog.closedNormally()) {
                    _mCTCSerialData.updateSwitchAndSignalEtcNumbersEverywhere(_mColumns.getEntrySelectedIndex(), dialog._mNewSwitchNumber, dialog._mNewSignalEtcNumber, dialog._mNewGUIColumnNumber, dialog._mNewGUIGeneratedAtLeastOnceAlready);
                    internalSensorManager.checkForChanges(_mCTCSerialData);
                    _mColumns.updateFrame();
                }
            }
        });
        dialog.setVisible(true);    // MUST BE AFTER "addWindowListener"!  BUG IN AWT/SWING!
    }//GEN-LAST:event_changeNumbersButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CreateXMLFiles createTextFile = new CreateXMLFiles(_mCTCSerialData.getOtherData(), _mCTCSerialData.getCodeButtonHandlerDataArrayList());
        createTextFile.createTextFiles(CommonSubs.getDirectoryOnly(_mProgramProperties._mFilename));
        _mColumns.updateFrame();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void _mOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mOpenActionPerformed
        final FileNameExtensionFilter filter = new FileNameExtensionFilter(".xml source files", "xml");
        _mOpen_Save_SaveAs.setFileFilter(filter);
        _mOpen_Save_SaveAs.setSelectedFile(new File(_mProgramProperties._mFilename));
        if (_mOpen_Save_SaveAs.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            _mProgramProperties._mFilename = ProjectsCommonSubs.addExtensionIfMissing(_mOpen_Save_SaveAs.getSelectedFile().getAbsolutePath(), ".xml");
            newOrOpenFile(true);
        }
    }//GEN-LAST:event__mOpenActionPerformed

    private void newOrOpenFile(boolean openExisting) {
        _mCTCSerialData = new CTCSerialData();
        _mOriginalCopy = new OriginalCopy();
        if (openExisting) {
            _mCTCSerialData.readDataFromXMLFile(_mProgramProperties._mFilename);
            _mOriginalCopy.makeDeepCopy(_mCTCSerialData);
        } else _mProgramProperties._mFilename = ProgramProperties.FILENAME_DEFAULT;
        setTitle("CTCEditor  " + _mProgramProperties._mFilename );
        _mJMRIConnection.start(_mCTCSerialData.getOtherData()._mJMRI_Host, _mCTCSerialData.getOtherData()._mJMRI_Port);
        _mDefaultListModel = new DefaultListModel<>();
        _mPresentlyDefinedColumns.setModel(_mDefaultListModel);
        _mColumns = new Columns(_mCTCSerialData, _mCheckJMRIObject, _mDefaultListModel,
                                deleteButton, reapplyPatternsButton, changeNumbersButton,
                                _mMoveUp, _mMoveDown,
                                _mEdit_CB_Prompt, _mCB_EditAlwaysEnabled, _mEdit_CB,
                                _mEdit_SIDI_Prompt, _mSIDI_Enabled, _mEdit_SIDI, 
                                _mEdit_SIDL_Prompt, _mSIDL_Enabled, _mEdit_SIDL,
                                _mEdit_SWDI_Prompt, _mSWDI_Enabled, _mEdit_SWDI,
                                _mEdit_SWDL_Prompt, _mSWDL_Enabled, _mEdit_SWDL,
                                _mEdit_CO_Prompt, _mCO_Enabled, _mEdit_CO,
                                _mEdit_TRL_Prompt, _mTRL_Enabled, _mEdit_TRL,
                                _mEdit_TUL_Prompt, _mTUL_Enabled, _mEdit_TUL,
                                _mEdit_IL_Prompt, _mIL_Enabled, _mEdit_IL);
    }
    
    private void _mNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mNewActionPerformed
            newOrOpenFile(false);
    }//GEN-LAST:event__mNewActionPerformed

    private void _mSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mSaveActionPerformed
        if (!validToSaveAtThisTime("Save", "")) return;
        _mCTCSerialData.writeDataToXMLFile(_mProgramProperties._mFilename);
        _mOriginalCopy.makeDeepCopy(_mCTCSerialData);
    }//GEN-LAST:event__mSaveActionPerformed

    private void _mSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mSaveAsActionPerformed
        if (!validToSaveAtThisTime("Save as", "")) return;
        final FileNameExtensionFilter filter = new FileNameExtensionFilter(".xml source files", "xml");
        _mOpen_Save_SaveAs.setFileFilter(filter);
        _mOpen_Save_SaveAs.setSelectedFile(new File(_mProgramProperties._mFilename));
        if (_mOpen_Save_SaveAs.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            _mProgramProperties._mFilename = ProjectsCommonSubs.addExtensionIfMissing(_mOpen_Save_SaveAs.getSelectedFile().getAbsolutePath(), ".xml");
            _mCTCSerialData.writeDataToXMLFile(_mProgramProperties._mFilename);
            _mOriginalCopy.makeDeepCopy(_mCTCSerialData);
            setTitle("CTCEditor  " + _mProgramProperties._mFilename );
        }
    }//GEN-LAST:event__mSaveAsActionPerformed

    private boolean validToSaveAtThisTime(String whatIsTriggeringSave, String hint) {
        if (_mColumns.anyErrorsPresent()) {
            JOptionPane.showMessageDialog(this, "There are errors present.  The action:\n\n" + whatIsTriggeringSave + "\n\nis not allowed until you fix all errors.\nYou can try Edit/Fix Errors first." + hint, "Unable to save at this time", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void _mFindAndReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mFindAndReplaceActionPerformed
        DlgFindAndReplace dialog = new DlgFindAndReplace(this, true, _mAwtWindowProperties, _mCTCSerialData);
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mFindAndReplaceActionPerformed

    private void _mFleetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mFleetingActionPerformed
        DlgFleeting dialog = new DlgFleeting(this, true, _mAwtWindowProperties, _mCTCSerialData.getOtherData());
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mFleetingActionPerformed

    private void _mPatternsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mPatternsActionPerformed
        DlgPatterns dialog = new DlgPatterns(this, true, _mAwtWindowProperties, _mProgramProperties);
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mPatternsActionPerformed

    private void _mDefaultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mDefaultsActionPerformed
        DlgDefaults dialog = new DlgDefaults(this, true, _mAwtWindowProperties, _mProgramProperties, _mCTCSerialData.getOtherData());
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mDefaultsActionPerformed

    private void _mDebuggingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mDebuggingActionPerformed
        DlgDebugging dialog = new DlgDebugging(this, true, _mAwtWindowProperties, _mCTCSerialData.getOtherData());
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mDebuggingActionPerformed

    private void _mGUIDesignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mGUIDesignActionPerformed
        DlgGUIDesign dialog = new DlgGUIDesign(this, true, _mAwtWindowProperties, _mCTCSerialData.getOtherData());
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mGUIDesignActionPerformed

    private void _mMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mMoveUpActionPerformed
        int selectedIndex = _mPresentlyDefinedColumns.getSelectedIndex();
        if (selectedIndex != -1) { // Safety:
            _mCTCSerialData.moveUp(selectedIndex);
            _mColumns.updateFrame();
            if (selectedIndex > 0) selectedIndex--;
            _mPresentlyDefinedColumns.setSelectedIndex(selectedIndex);
        }
    }//GEN-LAST:event__mMoveUpActionPerformed

    private void _mMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mMoveDownActionPerformed
        int selectedIndex = _mPresentlyDefinedColumns.getSelectedIndex();
        if (selectedIndex != -1) { // Safety:
            _mCTCSerialData.moveDown(selectedIndex);
            _mColumns.updateFrame();
            if (selectedIndex != _mCTCSerialData.getCodeButtonHandlerDataSize() - 1) selectedIndex++;
            _mPresentlyDefinedColumns.setSelectedIndex(selectedIndex);
        }
    }//GEN-LAST:event__mMoveDownActionPerformed

    private void _mQuitWithoutSavingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mQuitWithoutSavingActionPerformed
        if (_mOriginalCopy.changed(_mCTCSerialData)) {
            if (JOptionPane.showConfirmDialog(this, "File modified, do you really want to exit?", "Warning", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                shutdown();
            }
        } else {    // No changes, just close.
            shutdown();
        }
    }//GEN-LAST:event__mQuitWithoutSavingActionPerformed

    private void _mFixErrorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mFixErrorsActionPerformed
        DlgFixErrors dialog = new DlgFixErrors(this, true, _mAwtWindowProperties, _mColumns);
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mFixErrorsActionPerformed

    private void _mHelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mHelpAboutActionPerformed
        DlgAbout dialog = new DlgAbout(this, true, _mAwtWindowProperties);
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);    // Technically don't modify anything, but for consistency
    }//GEN-LAST:event__mHelpAboutActionPerformed

    private void _mJMRIServerParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mJMRIServerParamsActionPerformed
        DlgJMRISimpleServerParams dialog = new DlgJMRISimpleServerParams(this, true, _mAwtWindowProperties, _mCTCSerialData.getOtherData(), _mJMRIConnection);
        InternalSensorManager.doDialog(dialog, _mCTCSerialData);
    }//GEN-LAST:event__mJMRIServerParamsActionPerformed

    private void _mCheckEverythingWithJMRIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__mCheckEverythingWithJMRIActionPerformed
        boolean showErrors = JOptionPane.showConfirmDialog(this, "If there are errors, do you want to see them?", "Info", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
        _mColumns.updateFrame();    // Sets ERROR_STRING at the end of each line.
        if (showErrors) {
            ArrayList<String> errors = new ArrayList<>();
            _mCTCSerialData.getCodeButtonHandlerDataArrayList().forEach((codeButtonHandlerData) -> {
                _mCheckJMRIObject.analyzeClass(codeButtonHandlerData, errors);
            });
            if (!errors.isEmpty()) {
                String result = "";
                for (String error : errors) {
                    result += error + "\n";
                }
                JOptionPane.showMessageDialog(this, result);
            }
        }
    }//GEN-LAST:event__mCheckEverythingWithJMRIActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel _mCB_EditAlwaysEnabled;
    private javax.swing.JCheckBox _mCO_Enabled;
    private javax.swing.JButton _mCheckEverythingWithJMRI;
    private javax.swing.JMenuItem _mDebugging;
    private javax.swing.JMenuItem _mDefaults;
    private javax.swing.JButton _mEdit_CB;
    private javax.swing.JLabel _mEdit_CB_Prompt;
    private javax.swing.JButton _mEdit_CO;
    private javax.swing.JLabel _mEdit_CO_Prompt;
    private javax.swing.JButton _mEdit_IL;
    private javax.swing.JLabel _mEdit_IL_Prompt;
    private javax.swing.JButton _mEdit_SIDI;
    private javax.swing.JLabel _mEdit_SIDI_Prompt;
    private javax.swing.JButton _mEdit_SIDL;
    private javax.swing.JLabel _mEdit_SIDL_Prompt;
    private javax.swing.JButton _mEdit_SWDI;
    private javax.swing.JLabel _mEdit_SWDI_Prompt;
    private javax.swing.JButton _mEdit_SWDL;
    private javax.swing.JLabel _mEdit_SWDL_Prompt;
    private javax.swing.JButton _mEdit_TRL;
    private javax.swing.JLabel _mEdit_TRL_Prompt;
    private javax.swing.JButton _mEdit_TUL;
    private javax.swing.JLabel _mEdit_TUL_Prompt;
    private javax.swing.JMenu _mFile;
    private javax.swing.JMenuItem _mFindAndReplace;
    private javax.swing.JMenuItem _mFixErrors;
    private javax.swing.JMenuItem _mFleeting;
    private javax.swing.JMenuItem _mGUIDesign;
    private javax.swing.JMenu _mHelp;
    private javax.swing.JMenuItem _mHelpAbout;
    private javax.swing.JCheckBox _mIL_Enabled;
    private javax.swing.JLabel _mJMRIConnectionStatus;
    private javax.swing.JMenuItem _mJMRIServerParams;
    private javax.swing.JButton _mMoveDown;
    private javax.swing.JButton _mMoveUp;
    private javax.swing.JMenuItem _mNew;
    private javax.swing.JMenuItem _mOpen;
    private javax.swing.JFileChooser _mOpen_Save_SaveAs;
    private javax.swing.JMenuItem _mPatterns;
    private javax.swing.JList<String> _mPresentlyDefinedColumns;
    private javax.swing.JMenuItem _mQuitWithoutSaving;
    private javax.swing.JCheckBox _mSIDI_Enabled;
    private javax.swing.JCheckBox _mSIDL_Enabled;
    private javax.swing.JCheckBox _mSWDI_Enabled;
    private javax.swing.JCheckBox _mSWDL_Enabled;
    private javax.swing.JMenuItem _mSave;
    private javax.swing.JMenuItem _mSaveAs;
    private javax.swing.JCheckBox _mTRL_Enabled;
    private javax.swing.JCheckBox _mTUL_Enabled;
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeNumbersButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reapplyPatternsButton;
    // End of variables declaration//GEN-END:variables
}
