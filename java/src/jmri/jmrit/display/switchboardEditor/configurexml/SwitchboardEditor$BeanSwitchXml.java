package jmri.jmrit.display.switchboardEditor.configurexml;

import jmri.configurexml.AbstractXmlAdapter;
import jmri.jmrit.display.switchboardEditor.SwitchboardEditor;
import jmri.jmrit.display.switchboardEditor.SwitchboardEditor.BeanSwitch;
import jmri.jmrit.display.ToolTip;
import org.jdom2.Attribute;
import org.jdom2.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Handle configuration for display.switchboard.BeanSwitch objects.
 *
 * @author Egbert Broerse Copyright: (c) 2017
 */
public class SwitchboardEditor$BeanSwitchXml extends AbstractXmlAdapter {

    public SwitchboardEditor$BeanSwitchXml() {
    }

    /**
     * Default implementation for storing the contents of a BeanSwitch
     *
     * @param o Object to store, of type BeanSwitch
     * @return Element containing the complete info
     */
    @Override
    public Element store(Object o) {

        SwitchboardEditor.BeanSwitch bs = (SwitchboardEditor.BeanSwitch) o;

        Element element = new Element("switch");

        // include attributes
        element.setAttribute("label", bs.getNameString());
        //storeCommonAttributes(bs, element);
//        String txt = bs.getTooltip().getText();
//        if (txt != null) {
//            Element elem = new Element("tooltip").addContent(txt);
//            element.addContent(elem);
//        }
        //storeTextInfo(bs, element);

        element.setAttribute("class", "jmri.jmrit.display.switchboardEditor.configurexml.SwitchboardEditor$BeanSwitchXml");
        return element;
    }

    /**
     * Load, starting with the BeanSwitch element, then all the value-icon
     * pairs.
     * Not currently used as BeanSwitches are autogenerated by settings
     *
     * @param element Top level Element to unpack.
     * @param o       an Editor as an Object
     */
    @Override
    public void load(Element element, Object o) {
        // create the objects
        SwitchboardEditor p = (SwitchboardEditor) o;

//        int nCol = 2;
//        try {
//            nCol = element.getAttribute("colWidth").getIntValue();
//        } catch (org.jdom2.DataConversionException e) {
//            log.error("failed to convert colWidth attribute");
//        }
//
//        MemoryInputIcon l = new MemoryInputIcon(nCol, p);
//
//        loadTextInfo(l, element);
//        String name;
//        Attribute attr = element.getAttribute("memory");
//        if (attr == null) {
//            log.error("incorrect information for a memory location; must use memory name");
//            p.loadFailed();
//            return;
//        } else {
//            name = attr.getValue();
//        }
//
//        Memory m = jmri.InstanceManager.memoryManagerInstance().getMemory(name);
//
//        if (m != null) {
//            l.setMemory(name);
//        } else {
//            log.error("Memory named '" + attr.getValue() + "' not found.");
//            p.loadFailed();
//            return;
//        }
//
//        p.putItem(l);
//        // load individual item's option settings after editor has set its global settings
//        loadCommonAttributes(l, Editor.MEMORIES, element);
//
//        javax.swing.JComponent textField = l.getTextComponent();
//        jmri.jmrit.display.PositionablePopupUtil util = l.getPopupUtility();
//        if (util.hasBackground()) {
//            textField.setBackground(util.getBackground());
//        } else {
//            textField.setBackground(null);
//            textField.setOpaque(false);
//        }
    }

    private final static Logger log = LoggerFactory.getLogger(BeanSwitchXml.class.getName());
}
